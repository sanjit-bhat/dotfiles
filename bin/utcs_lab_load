#!/usr/bin/env python

"""Gets top UTCS lab machines by CPU cores/memory available."""

import os
import multiprocessing as mp
import requests
from bs4 import BeautifulSoup
from termcolor import colored
from texttable import Texttable
import humanize

UTCS_USERNAME = 'bhat'
SSH_KEY_LOC = '~/.ssh/utlab'
SAVE_DIR = '/tmp/utcs_lab_load/'  # Saves top machine results to this dir


def query_machine(machine_name):
    """Queries a lab machine to get resource utilization stats."""

    print(f'Connecting to {machine_name}')
    command = ('timeout 5s'
               f' ssh -i {SSH_KEY_LOC}'
               ' -o "StrictHostKeyChecking no"'  # SSH without asking for host key permissions
               f' {UTCS_USERNAME}@{machine_name}.cs.utexas.edu'
               r''' '{ lscpu | grep CPU\(s\): | head -n1 | awk '"'"'{print $2}'"'"';'''  # CPU cores
               ''' mpstat | tail -n1 | awk '"'"'{print $4}'"'"';'''  # Percentage CPU utilization
               ''' free -b | grep Mem | awk '"'"'{print $4}'"'"'; }' ''')  # Available memory

    stream = os.popen(command)
    try:
        total_cores, cpu_util, avail_mem = [float(x) for x in stream.read().split('\n')[:-1]]
        return [machine_name, total_cores * (1 - cpu_util * 0.01), avail_mem]
    except ValueError:
        print(colored(f"Error: couldn't connect to {machine_name}.", 'red'))
        return [machine_name, 0.0, 0.0]


def run_script():
    """Parent script that gets lab machine names, queries them, and prints best machines."""

    print(colored('Getting the raw HTML for UTCS lab monitor app', 'blue'))
    url = 'https://apps.cs.utexas.edu/unixlabstatus/'
    page = requests.get(url)

    print(colored('Getting names of all UTCS lab machines', 'blue'))
    soup = BeautifulSoup(page.content, 'html.parser')
    results = soup.find_all('td', style=lambda text: 'left' in text.lower() \
            and 'background-color: white' in text.lower())
    machine_names = [name.text for name in results]

    print(colored('Querying machines for resource data', 'blue'))
    pool = mp.Pool(mp.cpu_count())
    resources = pool.map(query_machine, machine_names)
    pool.close()

    # Sort according to cpu/mem
    labels = [['Machine Name', 'Cores Avail', 'Mem Avail']]
    cpu = labels + sorted(resources, reverse=True, key=lambda x: x[1])
    mem = labels + sorted(resources, reverse=True, key=lambda x: x[2])

    # Convert memory to human-readable format. This modifies `mem` list also
    for i in range(1, len(cpu)):
        cpu[i][2] = humanize.naturalsize(cpu[i][2])

    make_table = lambda matrix: Texttable().set_cols_align(['l', 'c', 'c']).add_rows(matrix).draw()

    print(colored('Top 10 CPU Machines', 'green'))
    print(colored(make_table(cpu[:11]), 'cyan'))
    print(colored('Top 10 Mem Machines:', 'green'))
    print(colored(make_table(mem[:11]), 'cyan'))

    print(colored(('Writing full list of sorted resources to '
                   f'{SAVE_DIR}cpu.txt and {SAVE_DIR}mem.txt'), 'blue'))
    if not os.path.exists(SAVE_DIR):
        os.mkdir(SAVE_DIR)
    with open(f'{SAVE_DIR}cpu.txt', 'w') as out_file:
        out_file.write(make_table(cpu))
    with open(f'{SAVE_DIR}mem.txt', 'w') as out_file:
        out_file.write(make_table(mem))


if __name__ == '__main__':
    run_script()
